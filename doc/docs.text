Документация
============

Введение
--------

Вы находитесь на главной странице документации `DB_Adapter`. Здесь можно познакомиться 
с основным функционалом, идеологией и особенностями библиотеки.

Если говорить в кратце, `DB_Adapter` является облегчённой версией `DbSimple`.
Она переписана в стиле [PHP5][] и использует несколько другую систему обработки ошибок.

Она также очищена от _спорных преимуществ_ в виде поддержки старых версий СУБД, PHP4 и т.д.
Вместе с ними мы отказались от встроенного кеширования. Соответствующие алгоритмы
слишком разняться от проекта к проекту, чтобы пытаться "впихнуть" их в библиотеку.
Как говориться, <q cite="http://www.kernel.org/">Пишите программы, которые делают одну вещь
и делают её хорошо</q>.

[PHP5]: http://php.net/manual/en/language.oop5.php
[API]:  /docs/api/


Идеология библиотеки
--------------------

`DB_Adapter` является довольно простой программой и не стремится к мировому господству.
Как и авторы `DbSimple`, мы не пытаемся сгладить отличия между различными СУБД
и привести их диалекты к стандарту SQL. Мы считаем, что это не то, чем стоит заниматься.

Вместо этого, мы стремимся создать унифицированный и элегантный способ обращения к этим СУБД и получения
результатов в удобном виде. Для нас имеет принципиальное значение удобочитаемость и ясность запросов,
удобство отладки сценариев и производительность используемого инструмента.

Среди прочего, мы стараемся, чтобы библиотека тоже имела ясный и простой код,
который удобно читать, понимать и поддерживать.

Это важно, чтобы библиотека могла эффективно развиваться.


Основной функционал
-------------------

### Унифицированный [интерфейс][API] для работы с различными СУБД

Мы планируем поддерживать MySQL, PostgreSQL, InterBase/FireBird и SQLite.
При этом средства, которые не поддерживаются конкретной СУБД напрямую, будут эмулироваться
для соответствия спецификации [API DB_Adapter][API]
(это касается [транзакций][tr], [объектных BLOB-полей][blobs] и т.д.)

В `DB_Adapter` при работе с любой СУБД используется унифицированная строка подключения [DSN].
Она используется примерно так:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$dsn = 'mysql://vb:qwerty@test?charset=utf8';
$DB = DB_Adapter_Factory::connect($dsn);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

То есть, теоретически, вы можете даже не задумываться, какая из СУБД используется
в данный момент, если не используете откровенно специфических сторон её диалекта.


### Встроенная поддержка [плейсхолдеров][phs] (маркеров форматной подстановки)

Плейсхолдеры позволяют использовать в запросах определённые синтаксические обороты
для снижения сроков разработки, улучшения читабельности кода и т.д. Например, они позволяют
семантично и платформо-независимо экранировать спецсимволы в строках,
совершать приведение типов и т.д.

Вот яркий пример использования плейсхолдеров:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$user = array(
    'login' => 'vb',
    'mail' => 'vb@in-source.ru'
);

$userid = $DB->query("

    INSERT INTO users (?#)
    VALUES (?a)",

    array_keys($user),
    array_values($user)
);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Для MySQL данный код передаст СУБД следующий запрос:

    INSERT INTO users (`login`, `mail`)
    VALUES ('vb', 'vb@in-source.ru')

Здорово, правда? =)


### Удобная система обработки ошибок

Поскольку отладка занимает значительную часть времени разработки программы,
в `DB_Adapter` мы постарались сделать её максимально удобной.

При ошибке вы будете получать исключения ([Exception]), которое можете тут же
обработать в соответствии с ситуацией. Сразу ясен запрос, который был отправлен СУБД
и контекст вызова (файл, строка и т.д.)


### Система логирования

Если это необходимо, `DB_Adapter` предоставляет систему расширенного логирования
запросов и статистики их выполнения. Вы сами назначаете объект-логер, через который
будет проходить вся необходимая информация и контекст вызова.


[tr]:           /docs/transactions/
[phs]:          /docs/placeholders/
[blobs]:        /docs/blobs/
[DSN]:          /docs/DSN/
[Exception]:    http://en.wikipedia.org/wiki/Exception_handling


API библиотеки
--------------

[API] `DB_Adapter` является точной копией API `DbSimple`. Это потрясающе простой и
лаконичный интерфейс, не страдающий избыточностью других библиотек.  
Его основные идеи таковы:

*   **Выполнение запроса и получение результата объединены в одну операцию**  
    То есть, не существует промежуточного объекта или ресурса _результата_,
    вы сразу получаете то, что нужно

*   **Представление результата определяется выбранным методом запроса**  
    Например, `selectRow()` возвращает строку таблицы, как ассоциативный массив, `selectCell()`
    &mdash; содержимое ячейки в виде скаляра и т.д.

[Подробнее об интерфейсе DB_Adapter][API]